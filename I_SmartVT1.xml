<?xml version="1.0"?>
<implementation>
	<functions>
		-- Smart Virtual Thermostat v1.0c
        
        local TEMP_SID =    "urn:upnp-org:serviceId:TemperatureSensor1"
        local HVOS_SID =    "urn:micasaverde-com:serviceId:HVAC_OperatingState1"
        local TSH_SID =     "urn:upnp-org:serviceId:TemperatureSetpoint1_Heat"
        local TSC_SID =     "urn:upnp-org:serviceId:TemperatureSetpoint1_Cool"
        local HVUOM_SID =   "urn:upnp-org:serviceId:HVAC_UserOperatingMode1"
        local SVT_SID =     "urn:micasaverde-com:serviceId:SmartVT1"
        local SWP_SID =    "urn:upnp-org:serviceId:SwitchPower1"
        
		local DELAY = 20 -- Seconds
		local DEFAULT_HEAT_SP = 21
		local DEFAULT_COOL_SP = 18
		local DEFAULT_HG_SP = 8
		local MAX_TEMP = 40
		local MIN_TEMP = 0
		local STEP = 1
		local constC = 0.6
		local constT = 0.01
		local Text = -8
		local power
		local ID_EVAN_TEMP = 61
		local interval
		local h_temp
		local min_temp
        
		function virtual_thermostat_startup (lul_device)
            luup.log ("Virtual thermostat running...")
            local data = readSettings(lul_device)
            updateStatus(60)
		end
        
        function readSettings(lul_device)
            local data = {}
        
            -- Config ID
            data.InSensors = toListOfNumbers(readVariableOrInit(lul_device,SVT_SID, "Inside Temp Sensors", "" ))
            data.OutSensors = toListOfNumbers(readVariableOrInit(lul_device,SVT_SID, "Outside Temp Sensors", "" ))
            data.inhibitSensors = toListOfNumbers(readVariableOrInit(lul_device,SVT_SID, "inhibit Sensors", "" ))
            data.heaters = toListOfNumbers(readVariableOrInit(lul_device,SVT_SID, "heaters", "" ))
        
            -- Config Variables
            data.OpenTempo = tonumber(readVariableOrInit(lul_device,SVT_SID, "Waiting Time Open", "0" ))
            data.CloseTempo = tonumber(readVariableOrInit(lul_device,SVT_SID, "Waiting Time Close", "0" ))
            data.ForcedTempo = tonumber(readVariableOrInit(lul_device,SVT_SID, "Forced Mode Duration", "1200" ))
        
            data.heatSp = tonumber(readVariableOrInit(lul_device,TSH_SID, "CurrentSetpoint", DEFAULT_HEAT_SP ))
            data.coolSp = tonumber(readVariableOrInit(lul_device,TSC_SID, "CurrentSetpoint", DEFAULT_COOL_SP )) 
        
            -- internal Variables
            data.ForcedModeState = readVariableOrInit(lul_device,SVT_SID, "Forced Mode", "0" )
        
            return data
        end
		
		
		function increaseTemp (heatSp)
            local data = readSettings(lul_device)
        
			local currentTemperature = AvgTemperature(data.InSensors) + STEP
			heatSp = tonumber (heatSp)
			local target = heatSp or MAX_TEMP
			if (currentTemperature &lt;= target) then
				luup.variable_set(TEMP_SID, "CurrentTemperature", tostring (currentTemperature), lul_device)
				if (currentTemperature &lt; target) then
                    SetTargetTable("1",data.heaters)
					luup.call_delay ("increaseTemp", DELAY, tostring (heatSp))
				else
                    SetTargetTable("0",data.heaters)
					luup.variable_set (HVOS_SID, "ModeState", "Idle", lul_device)
				end
			end
		end


		function decreaseTemp (coolSp)
            local data = readSettings(lul_device)
        
            local currentTemperature = AvgTemperature(data.InSensors) - STEP
			coolSp = tonumber (coolSp)
			local target = coolSp or MIN_TEMP
			if (currentTemperature &gt;= target) then
				luup.variable_set (TEMP_SID, "CurrentTemperature", tostring (currentTemperature), lul_device)
				if (currentTemperature &gt; target) then
					luup.call_delay ("decreaseTemp", DELAY, tostring (coolSp))
				else
					luup.variable_set (HVOS_SID, "ModeState", "Idle", lul_device)
				end
			end
		end
        
        
        function AvgTemperature(t)
            local sum = 0
            local count= 0
            local temp = {}
            for k,id in pairs(t) do
                local temp = luup.variable_get (TEMP_SID, "CurrentTemperature", id)
                if type(temp) == 'number' then
                    sum = sum + temp
                    count = count + 1
                end
            end
        
            if count &gt; 1 then
                return round((sum / count),1)
            else
                return false
            end
        
        end
        
        function SetTargetTable(target,t)
            for k,id in pairs(t) do
                luup.call_action(SWP_SID, "SetTarget", { newTargetValue=target }, id)
                
            end
        end
        
		function updateStatus(interval)
            local data = readSettings(lul_device)
        
            -- check data before process
            --if (data.InSensors == nill or #data.InSensors &lt; 1 or data.heaters == nill or #data.heaters &lt; 1) then return nill end
        
			local heatSp = data.heatSp
			local coolSp = data.coolSp
			local modeStatus = luup.variable_get (HVUOM_SID, "ModeStatus", lul_device)
			local Tint = AvgTemperature(data.InSensors) or heatSp
			luup.log("La temperature moyenne intereieur est de " .. Tint .. " DEGC")
			luup.variable_set (TEMP_SID, "CurrentTemperature", Tint, lul_device)
        
			if (modeStatus == "HeatOn") then
				luup.variable_set (HVOS_SID, "ModeState", "Heating", lul_device)
				luup.call_delay ("increaseTemp", DELAY, "")
			elseif (modeStatus == "CoolOn") then
				luup.variable_set (HVOS_SID, "ModeState", "Cooling", lul_device)
				luup.call_delay ("decreaseTemp", DELAY, "")
			elseif (modeStatus == "AutoChangeOver") then
				power = ((heatSp - tonumber(Tint)) * constC + (heatSp - Text) * constT) * 100
				if (power &lt; 0) then power = 0 end
				if (power &gt; 100) then power = 100 end
				local tpschauf = power * 36 / 60
				tpschauf = math.floor(tpschauf)
				local hchauf = os.date("*t")
                -- A refaire de mani√®re plus propre
				min_temp = hchauf.min + tpschauf
				if (min_temp &gt; 59) then
					min_temp = min_temp - 60
					h_temp = 1
				else
					h_temp = 0
				end
                --
				local hchauf1 = hchauf.hour * 100 + hchauf.min
				local harret = (hchauf.hour + h_temp) * 100 + min_temp
--				local harret = tonumber(hchauf) + tpschauf
				luup.log("La puissance calculee est de : " .. power .. "% et le temps de chauffe est de : " .. tpschauf .. " minutes sur une heure")
				luup.log("Puissance calculee a: " .. hchauf1 .. ". Le chauffage s'arretera a : " .. harret)
					luup.variable_set (HVOS_SID, "ModeState", "Heating", lul_device)
					luup.call_delay ("increaseTemp", DELAY, tostring (heatSp))
				--elseif (currentTemperature &gt; coolSp) then
				--	luup.variable_set (HVOS_SID, "ModeState", "Cooling", lul_device)
				--	luup.call_delay ("decreaseTemp", DELAY, tostring (coolSp))
				--else
				--	luup.variable_set (HVOS_SID, "ModeState", "Idle", lul_device)
				--end
			else
				luup.variable_set (HVUOM_SID, "ModeStatus", "Off", lul_device)
				luup.variable_set (HVOS_SID, "ModeState", "Idle", lul_device)
				power = 0
				luup.log("La puissance de chauffe est de: " .. power)
			end
			luup.call_timer("updateStatus", 1, interval, "", interval)
		end
	</functions>
	<startup>virtual_thermostat_startup</startup>
    <files>L_SmartVT1.lua</files>
	<actionList>
		<action>
			<serviceId>urn:upnp-org:serviceId:HVAC_UserOperatingMode1</serviceId>
			<name>SetModeTarget</name>
			<job>
				luup.variable_set (HVUOM_SID, "ModeTarget", lul_settings.NewModeTarget, lul_device)
				luup.variable_set (HVUOM_SID, "ModeStatus", lul_settings.NewModeTarget, lul_device)
				updateStatus(60)
				return 4, 5
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:TemperatureSetpoint1_Heat</serviceId>
			<name>SetCurrentSetpoint</name>
			<job>
				luup.variable_set (TSH_SID, "CurrentSetpoint", lul_settings.NewCurrentSetpoint, lul_device)
				updateStatus(60)
				return 4, 5
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:TemperatureSetpoint1_Cool</serviceId>
			<name>SetCurrentSetpoint</name>
			<job>
				luup.variable_set (TSC_SID, "CurrentSetpoint", lul_settings.NewCurrentSetpoint, lul_device)
				updateStatus(60)
				return 4, 5
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:SwitchPower1</serviceId>
			<name>SetTarget</name>
			<job>
				luup.variable_set (SWP_SID, "Target", lul_settings.newTargetValue, lul_device)
				luup.variable_set (SWP_SID, "Status", lul_settings.newTargetValue, lul_device)
				return 4, 5
			</job>
		</action>
	</actionList>
</implementation>
